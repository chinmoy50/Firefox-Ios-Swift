// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

import Foundation
import WebKit
import Shared
import Common

@objc
protocol JSPromptAlertControllerDelegate: AnyObject {
    func promptAlertControllerDidDismiss(_ alertController: JSPromptAlertController)
}

/// A simple version of UIAlertController that attaches a delegate to the viewDidDisappear method
/// to allow forwarding the event. The reason this is needed for prompts from Javascript is we
/// need to invoke the completionHandler passed to us from the WKWebView delegate or else
/// a runtime exception is thrown.
class JSPromptAlertController: UIAlertController {
    var alertInfo: JSAlertInfo?
    var logger: Logger = DefaultLogger.shared
    /// The completion handler that is expected to be called by the WebView delegate.
    /// It will be called in the de initializer if it is not nil.
    /// If the completion Handler is nil it means it was already called by the alert actions
    var completionHandler: VoidReturnCallback?

    weak var delegate: JSPromptAlertControllerDelegate?

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        delegate?.promptAlertControllerDidDismiss(self)
    }

    deinit {
        if let completionHandler {
            logger.log(
                "JS Prompt Alert contrller was deinited with a non nil completionHandler",
                level: .fatal,
                category: .webview
            )
            completionHandler()
        }
    }
}

/// An JSAlertInfo is used to store information about an alert we want to show either immediately or later.
/// Since alerts are generated by web pages and have no upper limit it would be unwise to allocate a
/// UIAlertController instance for each generated prompt which could potentially be queued in the background.
/// Instead, the JSAlertInfo structure retains the relevant data needed for the prompt along with a copy
/// of the provided completionHandler to let us generate the UIAlertController when needed.
protocol JSAlertInfo {
    func alertController() -> JSPromptAlertController
}

struct MessageAlert: JSAlertInfo {
    let message: String
    let frame: WKFrameInfo

    func alertController() -> JSPromptAlertController {
        let alertController = JSPromptAlertController(
            title: titleForJavaScriptPanelInitiatedByFrame(frame),
            message: message,
            preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: .OKString, style: .default))
        alertController.alertInfo = self
        return alertController
    }
}

struct ConfirmPanelAlert: JSAlertInfo {
    let message: String
    let frame: WKFrameInfo
    let completionHandler: (Bool) -> Void

    func alertController() -> JSPromptAlertController {
        // Show JavaScript confirm dialogs.
        let controller = JSPromptAlertController(
            title: titleForJavaScriptPanelInitiatedByFrame(frame),
            message: message,
            preferredStyle: .alert
        )
        controller.addAction(UIAlertAction(title: .OKString, style: .default) { [weak controller] _ in
            controller?.completionHandler = nil
            completionHandler(true)
        })
        controller.addAction(UIAlertAction(title: .CancelString, style: .cancel) { [weak controller] _ in
            controller?.completionHandler = nil
            completionHandler(false)
        })
        controller.completionHandler = {
            completionHandler(false)
        }
        controller.alertInfo = self
        return controller
    }
}

struct TextInputAlert: JSAlertInfo {
    let message: String
    let frame: WKFrameInfo
    let defaultText: String?
    let completionHandler: (String?) -> Void
    var input: UITextField?

    func alertController() -> JSPromptAlertController {
        let controller = JSPromptAlertController(title: titleForJavaScriptPanelInitiatedByFrame(frame),
                                                 message: message,
                                                 preferredStyle: .alert)
        var input: UITextField?
        controller.addTextField(configurationHandler: { textField in
            input = textField
            input?.text = self.defaultText
        })
        controller.addAction(UIAlertAction(title: .OKString, style: .default) { [weak controller] _ in
            controller?.completionHandler = nil
            completionHandler(input?.text)
        })
        controller.addAction(UIAlertAction(title: .CancelString, style: .cancel) { [weak controller] _ in
            controller?.completionHandler = nil
            completionHandler(nil)
        })
        controller.completionHandler = {
            completionHandler(nil)
        }
        controller.alertInfo = self
        return controller
    }
}

/// Show a title for a JavaScript Panel (alert) based on the WKFrameInfo. On iOS9 we will use the new securityOrigin
/// and on iOS 8 we will fall back to the request URL. If the request URL is nil, which happens for JavaScript pages,
/// we fall back to "JavaScript" as a title.
private func titleForJavaScriptPanelInitiatedByFrame(_ frame: WKFrameInfo) -> String {
    var title = "\(frame.securityOrigin.`protocol`)://\(frame.securityOrigin.host)"
    if frame.securityOrigin.port != 0 {
        title += ":\(frame.securityOrigin.port)"
    }
    return title
}
